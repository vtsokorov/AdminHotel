#ifndef QUERYS_H
#define QUERYS_H


#include <QString>

namespace Querys
{
   const QString insertArchiveRegistration =
            "INSERT INTO ARCHIVE_REGISTRATION ( "
                "ARCHIVE_REGISTRATION.P_ID_REGISTRATION, "
                "ARCHIVE_REGISTRATION.HOTEL_NAME, "
                "ARCHIVE_REGISTRATION.NUMBERED_STOCK_HOTEL, "
                "ARCHIVE_REGISTRATION.STATUS_ROOM_STOCK, "
                "ARCHIVE_REGISTRATION.RESIDENT_NAME, "
                "ARCHIVE_REGISTRATION.TELEPHONE, "
                "ARCHIVE_REGISTRATION.ORGANIZATION, "
                "ARCHIVE_REGISTRATION.ARRIVAL, "
                "ARCHIVE_REGISTRATION.DEPARTURE, "
                "ARCHIVE_REGISTRATION.SIDE_INFORMATION) "
            "VALUES ('%0', '%1', '%2', '%3', '%4', '%5', '%6', '%7', '%8', '%9')";

   const QString insertArchivePaymentList =
            "INSERT INTO ARCHIVE_PAYMENT_LIST ( "
                "ARCHIVE_PAYMENT_LIST.P_ID_PAYMENT_LIST, "
                "ARCHIVE_PAYMENT_LIST.F_ID_REGISTRATION, "
                "ARCHIVE_PAYMENT_LIST.PAYMENT_TYPE_STR, "
                "ARCHIVE_PAYMENT_LIST.PAID, "
                "ARCHIVE_PAYMENT_LIST.PAY_REMAINING, "
                "ARCHIVE_PAYMENT_LIST.DATE_PAY ) "
            "VALUES ('%0', '%1', '%2', '%3', '%4', '%5')";

   const QString selectPaymentList =
           "SELECT "
               "PAYMENT_LIST.P_ID_PAYMENT_LIST, "
               "PAYMENT_LIST.F_ID_REGISTRATION, "
               "PAYMENT_TYPE.PAY_TYPE, "
               "PAYMENT_LIST.PAID, "
               "PAYMENT_LIST.PAY_REMAINING, "
               "PAYMENT_LIST.DATE_PAY "
           "FROM PAYMENT_LIST "
              "INNER JOIN PAYMENT_TYPE ON (PAYMENT_LIST.F_ID_PAYMENT_TYPE = PAYMENT_TYPE.P_ID_PAYMENT_TYPE) "
           "WHERE "
              "((PAYMENT_LIST.F_ID_REGISTRATION = '%0'))";

   const QString hotelId =
           "SELECT REGISTRATION.P_ID_REGISTRATION FROM HOTELS "
                "INNER JOIN REGISTRATION ON (HOTELS.P_ID_HOTEL = REGISTRATION.F_ID_HOTELS) "
           "WHERE ((HOTELS.HOTEL_NAME = '%0')) "
                "GROUP BY REGISTRATION.P_ID_REGISTRATION "
                "ORDER BY REGISTRATION.P_ID_REGISTRATION";

   const QString hotelIdArchive =
           "SELECT ARCHIVE_REGISTRATION.P_ID_REGISTRATION "
           "FROM ARCHIVE_REGISTRATION "
           "WHERE ((ARCHIVE_REGISTRATION.HOTEL_NAME = '%0'))";

   const QString numberBill = "SELECT GEN_ID(GENBILLNUMBER, 1) FROM RDB$DATABASE";

   const QString billList =
           "SELECT "
               "HOTELS.HOTEL_NAME, REGISTRATION.RESIDENT_NAME, "
               "NUMBERED_STOCK.ROOM_NUMBER, PAYMENT_TYPE.PAY_TYPE, "
               "PAYMENT_LIST.PAID, REGISTRATION.ARRIVAL, REGISTRATION.DEPARTURE "
           "FROM REGISTRATION "
              "INNER JOIN NUMBERED_STOCK ON (REGISTRATION.F_ID_NUMBERED_STOCK = NUMBERED_STOCK.P_ID_NUMBERED_STOCK) "
              "INNER JOIN HOTELS ON (NUMBERED_STOCK.F_ID_HOTEL = HOTELS.P_ID_HOTEL) "
              "INNER JOIN PAYMENT_LIST ON (REGISTRATION.P_ID_REGISTRATION = PAYMENT_LIST.F_ID_REGISTRATION) "
              "INNER JOIN PAYMENT_TYPE ON (PAYMENT_LIST.F_ID_PAYMENT_TYPE = PAYMENT_TYPE.P_ID_PAYMENT_TYPE) "
           "WHERE ((REGISTRATION.P_ID_REGISTRATION = %0))";

   const QString logRegistration =
           "SELECT "
               "REGISTRATION.P_ID_REGISTRATION, REGISTRATION.RESIDENT_NAME, REGISTRATION.TELEPHONE, "
               "STATUS_ROOM.STATUS, NUMBERED_STOCK.ROOM_NUMBER, REGISTRATION.ARRIVAL, "
               "REGISTRATION.DEPARTURE, "
               "DATEDIFF (day, CAST(REGISTRATION.ARRIVAL AS DATE), CAST(REGISTRATION.DEPARTURE AS DATE)) AS DAY_COUNT, "
               "REGISTRATION.SIDE_INFORMATION "
           "FROM REGISTRATION "
               "INNER JOIN HOTELS ON (REGISTRATION.F_ID_HOTELS = HOTELS.P_ID_HOTEL) "
               "INNER JOIN STATUS_ROOM ON (REGISTRATION.F_ID_STATUS_ROOM = STATUS_ROOM.P_ID_STATUS_ROOM) "
               "INNER JOIN NUMBERED_STOCK ON (REGISTRATION.F_ID_NUMBERED_STOCK = NUMBERED_STOCK.P_ID_NUMBERED_STOCK) "
           "WHERE HOTELS.HOTEL_NAME = '%0' AND "
           "(SELECT * FROM INTERSECTIONDATE(NUMBERED_STOCK.P_ID_NUMBERED_STOCK, '%1', '%2')) > 0";

   const QString intersection =
           "SELECT * FROM INTERSECTIONDATE(%0, '%1', '%2')";

   const QString archiveLogRegistration =
           "SELECT "
               "ARCHIVE_REGISTRATION.P_ID_REGISTRATION, ARCHIVE_REGISTRATION.RESIDENT_NAME, "
               "ARCHIVE_REGISTRATION.TELEPHONE, ARCHIVE_REGISTRATION.STATUS_ROOM_STOCK, "
               "ARCHIVE_REGISTRATION.NUMBERED_STOCK_HOTEL, ARCHIVE_REGISTRATION.ARRIVAL, "
               "ARCHIVE_REGISTRATION.DEPARTURE, "
               "DATEDIFF(DAY, CAST(ARCHIVE_REGISTRATION.ARRIVAL AS DATE), CAST(ARCHIVE_REGISTRATION.DEPARTURE AS DATE)) DAY_COUNT, "
               "ARCHIVE_REGISTRATION.SIDE_INFORMATION "
           "FROM ARCHIVE_REGISTRATION "
           "WHERE ARCHIVE_REGISTRATION.HOTEL_NAME = '%0' AND "
           "ARCHIVE_REGISTRATION.ARRIVAL >= '%1' AND ARCHIVE_REGISTRATION.DEPARTURE <= '%2'";
}

#endif // QUERYS_H
